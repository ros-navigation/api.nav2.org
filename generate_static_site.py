#!/usr/bin/env python3
"""
Generate static HTML website from markdown files and data.
"""

import os
import json
import shutil
from pathlib import Path
from datetime import datetime
import re

class StaticSiteGenerator:
    def __init__(self, output_dir="site"):
        self.output_dir = Path(output_dir)
        self.template_path = Path("html_template.html")
        
        # Distribution data
        self.nav2_distributions = [
            {"title": "Nav2 Humble", "slug": "humble", "status": "LTS - Maintained", "description": "Nav2 for ROS 2 Humble - LTS release (not recommended for new projects)", "order": 1},
            {"title": "Nav2 Jazzy", "slug": "jazzy", "status": "LTS - Active", "description": "Nav2 for ROS 2 Jazzy - Latest and recommended stable release", "order": 2},
            {"title": "Nav2 Kilted", "slug": "kilted", "status": "Active", "description": "Nav2 for ROS 2 Kilted - Latest active release", "order": 3},
            {"title": "Nav2 Rolling", "slug": "rolling", "status": "Development", "description": "Nav2 for ROS 2 Rolling - Recommended for development", "order": 4}
        ]
        
        self.ros2_distributions = [
            {"title": "ROS 2 Humble", "slug": "humble", "status": "LTS", "description": "Active Long Term Support (LTS) release - Recommended for production", "order": 1},
            {"title": "ROS 2 Jazzy", "slug": "jazzy", "status": "Active", "description": "Current active release - Recommended for new projects", "order": 2},
            {"title": "ROS 2 Kilted", "slug": "kilted", "status": "Non-LTS", "description": "Active release - Recommended for new projects", "order": 3},
            {"title": "ROS 2 Rolling", "slug": "rolling", "status": "Development", "description": "Development release with cutting-edge features - Recommended for developers", "order": 4}
        ]
        
    def load_template(self):
        """Load the HTML template."""
        with open(self.template_path, 'r') as f:
            return f.read()
    
    def generate_home_page(self):
        """Generate the home page HTML."""
        template = self.load_template()
        
        content = '''
        <div class="home-page">
            <div class="intro">
                <h2 style="margin-top: 0; color: #414141; font-size: 1.8rem;">Nav2 API Docs</h2>
                <p style="font-size: 1.1rem; margin-bottom: 1rem;">Welcome to the Nav2 & ROS 2 API documentation. This site provides comprehensive Doxygen-generated documentation for Nav2 and ROS 2 across multiple distributions. We are also hosting ROS 2 because Your Friendly Neighborhood Navigator finds the new autogenerated format unreadable with the verbosity of C++ and I needed a new solution before my total descent into madness.</p>
                <p style="font-style: italic; opacity: 0.9; margin-bottom: 0; font-size: 1rem;">✨ Vibe coded for you by <strong>Open Navigation</strong> ✨</p>
            </div>

            <h2>Available Distributions</h2>

            <h3>Nav2 API Documentation</h3>

            <div class="distribution-grid">
        '''
        
        # Add Nav2 distribution cards
        for dist in sorted(self.nav2_distributions, key=lambda x: x['order']):
            status_class = dist['status'].lower().replace(' ', '-').replace('-', '')
            content += f'''
                <div class="distribution-card nav2-card">
                    <img src="assets/images/distributions/nav2_{dist['slug']}.png" alt="Nav2 {dist['title']} Logo" class="distribution-mascot" onerror="this.style.display='none'">
                    <h3><a href="nav2-{dist['slug']}/html/index.html">{dist['title']}</a></h3>
                    <div class="status {status_class}">{dist['status']}</div>
                    <p><strong>Description:</strong> {dist['description']}</p>
                    <div class="card-actions">
                        <a href="nav2-{dist['slug']}/html/index.html" class="btn-primary">C++ API Docs</a>
                        <a href="{dist['slug']}/actions/" class="action-api-btn">Action APIs</a>
                        <a href="nav2-{dist['slug']}/html/annotated.html" class="btn-secondary">Class List</a>
                    </div>
                </div>
            '''
        
        content += '''
            </div>

            <h3>ROS 2 API Documentation</h3>

            <div class="distribution-grid">
        '''
        
        # Add ROS 2 distribution cards
        for dist in sorted(self.ros2_distributions, key=lambda x: x['order']):
            status_class = dist['status'].lower().replace(' ', '-').replace('-', '')
            content += f'''
                <div class="distribution-card nav2-card">
                    <img src="assets/images/distributions/{dist['slug']}.png" alt="{dist['title']} mascot" class="distribution-mascot" onerror="this.style.display='none'">
                    <h3><a href="{dist['slug']}/html/index.html">{dist['title']}</a></h3>
                    <div class="status {status_class}">{dist['status']}</div>
                    <p><strong>Description:</strong> {dist['description']}</p>
                    <div class="card-actions">
                        <a href="{dist['slug']}/html/index.html" class="btn-primary">C++ API Docs</a>
                        <a href="{dist['slug']}/html/annotated.html" class="btn-secondary">Class List</a>
                    </div>
                </div>
            '''
        
        content += '''
            </div>

            <div class="resources-section">
                <h2>Resources</h2>
                <ul class="resources-list">
                    <li><a href="https://docs.ros.org/" target="_blank">ROS 2 Official Documentation</a></li>
                    <li><a href="https://github.com/ros2/rclcpp" target="_blank">Rclcpp GitHub Repository</a></li>
                    <li><a href="https://github.com/ros-navigation/navigation2" target="_blank">Nav2 GitHub Repository</a></li>
                    <li><a href="https://nav2.org/" target="_blank">Nav2 Project</a></li>
                    <li><a href="https://docs.nav2.org/" target="_blank">Nav2 Docs</a></li>
                </ul>
            </div>
        </div>
        '''
        
        html = template.replace('{{TITLE}}', 'Home').replace('{{CONTENT}}', content)
        
        # Write home page
        with open(self.output_dir / 'index.html', 'w') as f:
            f.write(html)
    
    def convert_markdown_to_html(self, markdown_content):
        """Convert markdown to HTML (basic conversion)."""
        html = markdown_content
        
        # Convert headers
        html = re.sub(r'^### (.*)', r'<h3>\1</h3>', html, flags=re.MULTILINE)
        html = re.sub(r'^## (.*)', r'<h2>\1</h2>', html, flags=re.MULTILINE)
        html = re.sub(r'^# (.*)', r'<h1>\1</h1>', html, flags=re.MULTILINE)
        
        # Convert bold text
        html = re.sub(r'\*\*(.*?)\*\*', r'<strong>\1</strong>', html)
        
        # Convert code blocks
        html = re.sub(r'```(\w+)?\n(.*?)\n```', r'<div class="action-examples"><pre><code>\2</code></pre></div>', html, flags=re.DOTALL)
        
        # Convert inline code
        html = re.sub(r'`([^`]+)`', r'<code>\1</code>', html)
        
        # Convert links
        html = re.sub(r'\[([^\]]+)\]\(([^)]+)\)', r'<a href="\2">\1</a>', html)
        
        # Convert tables
        lines = html.split('\n')
        in_table = False
        table_html = []
        
        for i, line in enumerate(lines):
            if '|' in line and not in_table:
                in_table = True
                table_html.append('<div class="action-section"><table>')
                # Check if next line is separator
                if i + 1 < len(lines) and '---' in lines[i + 1]:
                    # This is a header row
                    cells = [cell.strip() for cell in line.split('|') if cell.strip()]
                    table_html.append('<thead><tr>')
                    for cell in cells:
                        table_html.append(f'<th>{cell}</th>')
                    table_html.append('</tr></thead><tbody>')
                    continue
            elif '|' in line and in_table:
                if '---' in line:
                    continue  # Skip separator row
                cells = [cell.strip() for cell in line.split('|') if cell.strip()]
                table_html.append('<tr>')
                for cell in cells:
                    table_html.append(f'<td>{cell}</td>')
                table_html.append('</tr>')
            elif in_table and '|' not in line:
                in_table = False
                table_html.append('</tbody></table></div>')
                table_html.append(line)
            else:
                table_html.append(line)
        
        if in_table:
            table_html.append('</tbody></table></div>')
        
        html = '\n'.join(table_html)
        
        # Convert paragraphs
        paragraphs = html.split('\n\n')
        html_paragraphs = []
        for para in paragraphs:
            para = para.strip()
            if para and not para.startswith('<'):
                # Convert line breaks to <br> within paragraphs
                para = para.replace('\n', '<br>')
                html_paragraphs.append(f'<p>{para}</p>')
            else:
                html_paragraphs.append(para)
        
        return '\n'.join(html_paragraphs)
    
    def generate_action_pages(self):
        """Generate action documentation pages."""
        template = self.load_template()
        
        # Generate action overviews for all distributions
        distributions = ['humble', 'jazzy', 'kilted', 'rolling']
        
        for dist in distributions:
            if Path(f'{dist}/actions/index.md').exists():
                with open(f'{dist}/actions/index.md', 'r') as f:
                    content = f.read()
                
                # Extract title and content
                if content.startswith('---'):
                    parts = content.split('---', 2)
                    if len(parts) >= 3:
                        frontmatter = parts[1]
                        body = parts[2]
                        
                        # Extract title
                        title_match = re.search(r'title:\s*"([^"]+)"', frontmatter)
                        title = title_match.group(1) if title_match else "Action APIs"
                        
                        html_content = self.convert_markdown_to_html(body)
                        html = template.replace('{{TITLE}}', title).replace('{{CONTENT}}', html_content)
                        
                        # Create directory and write file
                        action_dir = self.output_dir / dist / 'actions'
                        action_dir.mkdir(parents=True, exist_ok=True)
                        
                        with open(action_dir / 'index.html', 'w') as f:
                            f.write(html)
        
        # Generate individual action pages for all distributions
        for dist in distributions:
            if Path(f'actions/{dist}').exists():
                for action_file in Path(f'actions/{dist}').glob('*.md'):
                    with open(action_file, 'r') as f:
                        content = f.read()
                    
                    # Extract title and content
                    if content.startswith('---'):
                        parts = content.split('---', 2)
                        if len(parts) >= 3:
                            frontmatter = parts[1]
                            body = parts[2]
                            
                            # Extract title
                            title_match = re.search(r'title:\s*"([^"]+)"', frontmatter)
                            title = title_match.group(1) if title_match else action_file.stem
                            
                            html_content = self.convert_markdown_to_html(body)
                            html = template.replace('{{TITLE}}', title).replace('{{CONTENT}}', html_content)
                            
                            # Create directory and write file
                            action_dir = self.output_dir / 'actions' / dist
                            action_dir.mkdir(parents=True, exist_ok=True)
                            
                            html_filename = action_file.stem + '.html'
                            with open(action_dir / html_filename, 'w') as f:
                                f.write(html)
    
    def copy_assets(self):
        """Copy assets to the output directory."""
        if Path('assets').exists():
            shutil.copytree('assets', self.output_dir / 'assets', dirs_exist_ok=True)
    
    def generate_site(self):
        """Generate the complete static site."""
        print("Generating static HTML website...")
        
        # Create output directory
        self.output_dir.mkdir(exist_ok=True)
        
        # Generate pages
        print("Generating home page...")
        self.generate_home_page()
        
        print("Generating action documentation pages...")
        self.generate_action_pages()
        
        print("Copying assets...")
        self.copy_assets()
        
        print(f"Static site generated in {self.output_dir}")

if __name__ == '__main__':
    generator = StaticSiteGenerator()
    generator.generate_site()